<?php
namespace Ufo\HTTP;

/**
 *
 * @author gb-michel
 *        
 */
class TaintedInputs
{
    public $taintedInputs = null;
    
    public $arrayMark = false;
    
    // test if input is submit 
    public function is_submit()
    {
        if( $this->taintedInputs->isAutogenerated()){
            return false;
        }
        else{
            return true;
        }
    }
    
    // test if value is submit but is empty
    public function is_empty()
    {
        if( $this->is_submit() && ($this->taintedInputs->length()=== 0))
            return true;   
        else
            return false;
    }
    
    final public function setDefaultArray($default_mix)
    {
        $this->arrayMark = true;
        if(!$this->taintedInputs instanceof TaintedArray){
            $this->taintedInputs->decontaminate();
    
            // $tainted = (string)$this->taintedInputs;
            $this->taintedInputs = new TaintedArray(array(),$default_mix);
        }
    
        $this->taintedInputs->setDefault($default_mix);
    
        return $this;
    }
    
    /**
     * (non-PHPdoc)
     * @see \Ufo\HTTP\TaintedString::sanitizeWithCheck()
     */
    final public function sanitizeWithCheck()
    {
            if( !$this->is_submit()){
                return $this->taintedInputs->getDefaultData();
            }
            
            $args = func_get_args();
            return call_user_func_array(array($this->taintedInputs,'sanitizeWithCheck'),$args);
    }
    
    
    /**
     * (non-PHPdoc)
     * @see \Ufo\HTTP\TaintedString::sanitizeAsObjectProperty()
     */
    final public function sanitizeAsObjectProperty()
    {
        if( !$this->is_submit()){
            return $this->taintedInputs->getDefaultData();
        }
    
        $args = func_get_args();
        return call_user_func_array(array($this->taintedInputs,'sanitizeAsObjectProperty'),$args);
    }
    
    final public function __construct($inputs_mix = '')
    {
        if( is_array($inputs_mix)){
            $this->taintedInputs = new TaintedArray($inputs_mix);
        }
        else{
            $this->taintedInputs = new TaintedString($inputs_mix);
        }
    }
    
    final public function __call($methods_str,$args_arr)
    {
        return call_user_func_array(array($this->taintedInputs,$methods_str),$args_arr);
    }
}

?>