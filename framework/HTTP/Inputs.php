<?php
namespace Ufo\HTTP;


class ModifiedInputsException extends \Exception {};
/**
 *
 * @author gb-michel
 *        
 */
class Inputs implements \ArrayAccess
{
    private static $_initialized = false;
    
    private $_name = 'global';
    private $_values = array();
    
    private $_locked = false;
    
    /**
     * 
     * @param unknown $keys_str
     * @return boolean
     */
    private static function checkKey( $key_str)
    {
    	if( preg_match('/^[a-zA-Z[\]0-9_]+$/',$key_str) > 0){
    		return true;	
    	}
    	else{
    		return false;
    	}
    }
    
    /**
     * 
     * @param unknown $name_str
     */
    private function __construct($input_array)
    {
        $this->_locked= true;
        
        if( isset($input_array)){
            foreach( $input_array as $key=>$val)
            {
            	if( self::checkKey($key)){
            		$this->_values[$key] = new TaintedInputs($val);
            	}
            }
        }
    }
    
    /**
     * Design pattern singleton : disable __clone()
     */
    private function __clone()
    {
        
    }
    
    
    
    /**
     * Start by tainting all inputs and overwrite global var 
     */
    public static function init( $overwriteCOOKIE = true)
    {
        if( self::$_initialized == false){

            $_POST = new Inputs($_POST);
            $_GET = new Inputs($_GET);
            
            if( $overwriteCOOKIE === true) $_COOKIE = new Inputs($_COOKIE);
            
            $_SERVER = new HttpRequest($_SERVER);
            
            self::$_initialized = true;
        }
    }
    
    
    public static function lock()
    {
        $this->_locked = true;
    }
    
    public static function unlock()
    {
        $this->_locked = false;
    }
    
    /**
     * To export TaintedInputs in a TaintedCollection by name of inputs
     *
     * @param unknown $inputsname_array
     */
    public function extract($inputsname_array)
    {
        $coll = new TaintedCollection();
    
        foreach($inputsname_array as $name)
        {
            if(isset($this->_values[$name])){
                $coll->addSingleObject($name, $this->_values[$name]);
            }
        }
    
        return $coll;
    }
    
    
    public function get($key_str)
    {
        if( isset($this->_values[$key_str])){
            return $this->_values[$key_str];
        }
        else{
            return null;
        }
    }

    /* ********** Array interface ************** */
    
    public function offsetSet($offset, $value)
    {
        throw new ModifiedInputsException("ERROR: Input cannot be modified");
    }
    
    public function offsetExists($offset)
    {
        return isset($this->_values[$offset]);
    }
    
    public function offsetUnset($offset)
    {
        unset($this->_values[$offset]);
    }
    
    public function offsetGet($offset)
    {
        if (isset($this->_values[$offset]))
        {
            return $this->_values[$offset];
        }
        else{
            $this->_values[$offset] = new TaintedInputs();
            $this->_values[$offset]->markAsAutogenerated();

            return $this->_values[$offset];
        }
    }
    
}

?>